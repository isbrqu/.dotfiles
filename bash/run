#!/usr/bin/env bash
# ~/.bashrc: executed by bash(0) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# fo examples

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# -- path --
export PATH="$PATH:$HOME/.local/bin"

export EDITOR=vim
export PYTHONSTARTUP="${XDG_CONFIG_HOME:-$HOME/.config}/pythonstartup.py"

xinput disable "ILITEK ILITEK Multi-Touch"

# -- keyboard --
setxkbmap -layout us -variant altgr-intl

[[ "$(tty)" = /dev/tty1 ]]\
&& startx

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options

# -- history --
# append to the history file, don't overwrite it
shopt -s histappend
# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=100
HISTFILESIZE=100
HISTFILE=~/.config/dot/bash/history-private
HISTIGNORE='history:ls:pwd:l:'
HISTTIMEFORMAT='%F, %T '
HISTCONTROL=ignoreboth:erasedups

PROMPT_COMMAND='history -a'

# INPUTRC=~/.config/dot/bash/inputrc

# -- less --
export LESSHISTFILE=-

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# -- color --
# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
#[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
[[ -z "${debian_chroot:-}" && -r /etc/debian_chroot ]]\
&& debian_chroot=$(cat /etc/debian_chroot)\

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
# force_color_prompt=yes

[[ -n "$force_color_prompt" ]] && {
    # We have color support; assume it's compliant with Ecma-48
    # (ISO/IEC-6429). (Lack of such support is extremely rare, and such
    # a case would tend to support setf rather than setaf.)
    [[ -x /usr/bin/tput ]] && {
        tput setaf 1 >& /dev/null
        color_prompt=yes
    } || {
        color_prompt=
    }
}

# -- ps1 --
[[ "$color_prompt" = yes ]] && {
    PS1='${debian_chroot:+($debian_chroot)}'
    PS1="$PS1"'\[\033[01;32m\]\u@\h\[\033[00m\]:'
    PS1="$PS1"'\[\033[01;34m\]\w\[\033[00m\]'
    PS1="$PS1"'\n\$ '
} || {
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\n\$ '
}

unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
[[ "$TERM" == xterm* || "$TERM" == rxvt* ]]\
&& PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"

# -- xdg --
export XDG_CONFIG_HOME="$HOME/.config"
export XDG_CACHE_HOME="$HOME/.cache"
export XDG_DATA_HOME="$HOME/.local/share"

# -- util functions --
o() {
    if [[ -n "$1" ]];then
        xdg-open "$1" &> /dev/null &
        (( $? == 0 )) && disown
    else
        local file
        file="$(find -type f | fzf --height=50%)"
        # file="$(fzf --height=50%)"
        if [[ "$file" != "" ]];then
            xdg-open "$file" &> /dev/null &
            (( $? == 0 )) && disown
        fi
    fi
}

envup() {
    while IFS='=' read -r name value || [[ -n "$line" ]];do
        export "$name"="$value"
    done < ".env"
}

alias getpath="find -type f | fzf | sed 's/^..//' | tr -d '\n' | cclip"

# -- misc --
export WGETRC="$XDG_CONFIG_HOME/wgetrc"

# -- mysql --
export MYSQL_HISTFILE="$XDG_DATA_HOME/mysql_history"

# -- xauthority --
export XAUTHORITY="$XDG_RUNTIME_DIR/Xauthority"

# -- gcc_colors --
# colored GCC warnings and errors
# export GCC_COLORS="error=01;31"
# export GCC_COLORS="$GCC_COLORS:warning=01;35"
# export GCC_COLORS="$GCC_COLORS:note=01;36"
# export GCC_COLORS="$GCC_COLORS:caret=01;32"
# export GCC_COLORS="$GCC_COLORS:locus=01"
# export GCC_COLORS="$GCC_COLORS:quote=01S"
# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
    if [[ -f /usr/share/bash-completion/bash_completion ]];then
        . /usr/share/bash-completion/bash_completion
    elif [[ -f /etc/bash_completion ]];then
        . /etc/bash_completion
    fi
fi

# enable color support of ls and also add handy aliases
if [[ -x /usr/bin/dircolors && -r ~/.dircolors ]];then
    eval "$(dircolors -b ~/.dircolors)"
else
    eval "$(dircolors -b)"
fi

eval "$(cat "$XDG_CONFIG_HOME/user-dirs.dirs")"

# -- clipboard --
alias cclip='xclip -selection clipboard -in'
alias pclip='xclip -selection clipboard -out'

# -- date --
alias mydate='date "+%T-%x" | tr ":/" "--"'

# -- docker --
alias d='docker'
alias dc='docker-compose'

# -- search --
_docker_search() {
    local -r URL_BASE='https://hub.docker.com/search'
    local type="${2-image}"
    local url="$URL_BASE?q=$1&type=$type"
    o "$url"
}
alias goo='googler -n 3'
alias docker-search='_docker_search'

# -- download --
alias wget-clip='wget --continue "$(xclip -selection clipboard -out)"'
alias spotify-dl='docker run\
    -it --user=$(id -u):$(id -g) -v $(pwd):/download --rm spotify-dl'

m4adl() {
    local url
    local path="~/m/%(title)s.%(ext)s"
    url="${1:-$(xclip -selection clipboard -out)}"
    youtube-dl "$url" --extract-audio --audio-format m4a --output "$path"
}

mp3dl() {
    local url
    local path="~/m/%(title)s.%(ext)s"
    url="${1:-$(xclip -selection clipboard -out)}"
    youtube-dl "$url" --extract-audio --audio-format mp3 --output "$path"
}

mp4dl() {
    local url
    local path="~/v/%(title)s.%(ext)s"
    url="${1:-$(xclip -selection clipboard -out)}"
    youtube-dl "$url" --format mp4 --output "$path"
}

# -- ls --
LSOPTIONS=""
LSOPTIONS="$LSOPTIONS --color=always"
LSOPTIONS="$LSOPTIONS --almost-all"
LSOPTIONS="$LSOPTIONS --group-directories"
LSOPTIONS="$LSOPTIONS --sort=extension"
LSOPTIONS="$LSOPTIONS --human-readable"
alias ll="ls -l $LSOPTIONS"
l() {
    if [[ -f "$1" ]];then
        # read a file
        bat "$1" || cat "$1"
    elif [[ -z "$1" ]];then
        # list all file
        ls -1 $LSOPTIONS
    else
        # list folder contents
        ls -1 $LSOPTIONS "$1"
    fi
}

# -- cd --
alias ..='prev_cd'
prev_cd() {
    if [[ -n $1 ]];then
        local -i n=$1
        for ((i=1; i<=n; i++));do
            cd ..
        done
    else
        cd ..
    fi
}

# -- tmux --
export TMUX_SCRIPT="$XDG_CONFIG_HOME/tmux/script"
export TMUX_FILETREE_COMMAND="ls -1 $LSOPTIONS \"\$(readlink -e %s)\""

tmux_start() {
    if [[ -n "$TMUX" ]];then
        echo "quÃ© haces capo?"
        return 1
    fi
    local sessions
    local session
    sessions="$(tmux list-session -F '#{session_name}' 2> /dev/null)"
    session="$(echo "$sessions" | fzf --print-query)"
    session="$(echo "${session//*[$'\n']}")"
    if [[ -n "$session" ]];then
        tmux attach-session -t "$session" 2> /dev/null
        if (( $? != 0 ));then
            tmux new-session -s "$session" &> /dev/null
        fi
    fi
}

c() {
    local request="$1"
    request="${request//./}"
    request="${request//,/.}"
    result="$(awk 'BEGIN { printf "%.2f", '"$request"'; exit }')"
    echo "$request=$result"
    echo "$result" | xclip -sel clipboard -in
}

v() {
    if [[ -n "$1" ]];then
        vim "$1"
    elif [[ -n "$TMUX" ]];then
        local file
        file="$(fzf-tmux -p)"\
        && vim "$file"
    else
        local file
        file="$(fzf)"\
        && vim "$file"
    fi
}

extract() {
     if [[ -f $1 ]]; then
         case $1 in
             *.tar.bz2)   tar xvjf $1    ;;
             *.tar.gz)    tar xvzf $1    ;;
             *.bz2)       bunzip2 $1     ;;
             *.rar)       unrar x $1     ;;
             *.gz)        gunzip $1      ;;
             *.tar)       tar xvf $1     ;;
             *.tbz2)      tar xvjf $1    ;;
             *.tgz)       tar xvzf $1    ;;
             *.zip)       unzip $1       ;;
             *.Z)         uncompress $1  ;;
             *.7z)        7z x $1        ;;
             *)           echo "'$1' cannot be extracted via >extract<" ;;
         esac
     else
         echo "'$1' is not a valid file"
     fi
}

# -- fzf --
FZF_HOME="$XDG_CONFIG_HOME/dot/fzf"
FZF_IGNORE="--path-to-ignore $FZF_HOME/ignore --unrestricted"
FZF_BIND="--bind ctrl-space:accept"
export FZF_DEFAULT_COMMAND="ag --no-color --hidden $FZF_IGNORE -g "'""'
export FZF_PREVIEW="--preview 'bat {} --color=always'"
export FZF_DEFAULT_OPTS="--reverse $FZF_BIND"

# setup
if [[ ! "$PATH" == *"$FZF_PATH_BIN"* ]];then
    export PATH="${PATH:+${PATH}:}$FZF_PATH_BIN"
fi

# auto-completion
if [[ $- == *i* ]];then
    . "$FZF_PATH_SHELL/completion.bash" 2> /dev/null
fi

# key bindings
. "$XDG_CONFIG_HOME/fzf/shell/key-bindings.bash"

# -- startup --
if [[ "$(tty)" == */pts/* ]];then
    if [[ -z "$TMUX" ]];then
        . "$XDG_CONFIG_HOME/dot/bash/tmux-session"
        tmux_start
    fi
fi

