#!/usr/bin/env bash
# ~/.bashrc: executed by bash(0) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# -- env --
export XDG_CACHE_HOME="$HOME/.cache"
export XDG_CONFIG_HOME="$HOME/.config"
export XDG_DATA_HOME="$HOME/.local/share"
. "$XDG_CONFIG_HOME/user-dirs.dirs"
export DOT_PATH="$XDG_CONFIG_HOME/dot"
# colored GCC warnings and errors
# export GCC_COLORS="error=01;31"
# export GCC_COLORS="$GCC_COLORS:warning=01;35"
# export GCC_COLORS="$GCC_COLORS:note=01;36"
# export GCC_COLORS="$GCC_COLORS:caret=01;32"
# export GCC_COLORS="$GCC_COLORS:locus=01"
# export GCC_COLORS="$GCC_COLORS:quote=01S"
PWDD='"$PWD"'
AG_OPTS="$AG_OPTS --no-color"
AG_OPTS="$AG_OPTS --hidden"
AG_OPTS="$AG_OPTS --path-to-ignore $DOT_PATH/ag-ignore.list"
AG_OPTS="$AG_OPTS --unrestricted"
AG_OPTS="$AG_OPTS -g \"\""
BAT_OPTS="$BAT_OPTS --color=always"
LS_OPTS="$LS_OPTS --color=always"
LS_OPTS="$LS_OPTS --almost-all"
LS_OPTS="$LS_OPTS --group-directories"
LS_OPTS="$LS_OPTS --sort=extension"
LS_OPTS="$LS_OPTS --human-readable"
DOCKER_OPTS="$DOCKER_OPTS --interactive"
DOCKER_OPTS="$DOCKER_OPTS --tty"
DOCKER_OPTS="$DOCKER_OPTS --rm"
DOCKER_OPTS="$DOCKER_OPTS --user=$(id -u):$(id -g)"
DOCKER_NODE_OPTS="$DOCKER_OPTS"
DOCKER_NODE_OPTS="$DOCKER_NODE_OPTS --volume $PWDD:/usr/src/app"
DOCKER_NODE_OPTS="$DOCKER_NODE_OPTS --workdir /usr/src/app"
DOCKER_NODE_OPTS="$DOCKER_NODE_OPTS node"
DOCKER_DOWNLOAD_OPTS="$DOCKER_OPTS --volume $PWDD:/download"
DOCKER_SPOTIFYDL_OPTS="$DOCKER_DOWNLOAD_OPTS"
DOCKER_YOUTUBEDL_OPTS="$DOCKER_DOWNLOAD_OPTS"
HISTSIZE=100
HISTFILESIZE=100
HISTFILE=~/.config/dot/bash/history-private
HISTIGNORE='history:ls:pwd:l:'
HISTTIMEFORMAT='%F, %T '
HISTCONTROL=ignoreboth:erasedups
PROMPT_COMMAND='history -a'
# INPUTRC=~/.config/dot/bash/inputrc
export EDITOR=vim
export LESSHISTFILE=-
export PATH="$PATH:$HOME/.local/bin"
export BASH_PATH="$DOT_PATH/bash"
export FZF_BIND="$FZF_BIND --bind ctrl-space:accept"
export FZF_DEFAULT_COMMAND="ag $AG_OPTS"
export FZF_DEFAULT_OPTS="--reverse $FZF_BIND"
export FZF_PATH="$DOT_PATH/fzf"
export FZF_PREVIEW="--preview 'bat {} $BAT_OPTS'"
export PYTHON_PATH="$DOT_PATH/python"
export PYTHONSTARTUP="$PYTHON_PATH/startup.py"
export TMUX_FILETREE_COMMAND='ls -1 "$(readlink -e %s)"'
export TMUX_PATH="$DOT_PATH/tmux"
export TMUX_SCRIPT="$TMUX_PATH/script"
export WGETRC="$DOT_PATH/wgetrc"
export XAUTHORITY="$XDG_RUNTIME_DIR/xauthority"
# -- alias --
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.
alias ..='prev_cd'
alias clipc='xclip -selection clipboard -in'
alias clipp='xclip -selection clipboard -out'
alias d='docker'
alias date-now='date "+%T-%x" | tr ":/" "--"'
alias dc='docker-compose'
alias docker-search='_docker_search'
alias goo='googler -n 3'
alias ll="ls -l $LS_OPTS"
alias node="docker run $DOCKER_NODE_OPTS node"
alias npm="docker run $DOCKER_NODE_OPTS npm"
alias path-get="find -type f | fzf | sed 's/^..//' | tr -d '\n' | clipc"
alias spotify-dl="docker run $DOCKER_SPOTIFYDL_OPTS spotify-dl"
alias wget-clip='wget --tries=inf --continue "$(clipp)"'
alias youtube-dl="docker run $DOCKER_YOUTUBEDL_OPTS youtube-dl --no-cache-dir"

# -- util functions --
_open() {
    local file="$1"
    xdg-open "$file" &> /dev/null &
    (( $? == 0 )) && disown
}

open() {
    local file="$1"
    if [[ -n "$file" ]];then
        open_xdg "$file"
    else
        file="$(find -type f | fzf --height=50%)"
        # file="$(fzf --height=50%)"
        if [[ "$file" != "" ]];then
            open_xdg "$file"
        fi
    fi
}

envup() {
    while IFS='=' read -r name value || [[ -n "$line" ]];do
        export "$name"="$value"
    done < ".env"
}

_docker_search() {
    local -r URL_BASE='https://hub.docker.com/search'
    local type="${2-image}"
    local url="$URL_BASE?q=$1&type=$type"
    open "$url"
}

yt() {
    local option="$1"
    local format="$2"
    local url
    local OPTS
    url="${3:-$(clipp)}"
    case "$option" in
        audio)
            OPTS="--extract-audio --audio-format $format"
        ;;
        video)
            OPTS="--format $format"
        ;;
        img)
            OPTS="--write-thumbnail --skip-download"
        ;;
        *)
            echo "option not found. Use audio, video or img"
            echo "usage: yt <audio|video|img> <format>"
            return 1
        ;;
    esac
    youtube-dl $OPTS "$url"
}

l() {
    if [[ -f "$1" ]];then
        # read a file
        bat "$1" || cat "$1"
    elif [[ -z "$1" ]];then
        # list all file
        ls -1 $LS_OPTS
    else
        # list folder contents
        ls -1 $LS_OPTS "$1"
    fi
}

prev_cd() {
    if [[ -n $1 ]];then
        local -i n=$1
        for ((i=1; i<=n; i++));do
            cd ..
        done
    else
        cd ..
    fi
}

tmux_start() {
    if [[ -n "$TMUX" ]];then
        echo "error (1): the session is already started"
        return 1
    fi
    tmux attach-session -t "home"
}

c() {
    local code='BEGIN { printf "%.2f", $request; exit }'
    local request="$1"
    request="${request//./}"
    request="${request//,/.}"
    result="$(awk "$code")"
    echo "$request=$result"
    echo "$result" | clipc
}

v() {
    if [[ -n "$1" ]];then
        vim "$1"
    elif [[ -n "$TMUX" ]];then
        local file
        file="$(fzf-tmux -p)"\
        && vim "$file"
    else
        local file
        file="$(fzf)"\
        && vim "$file"
    fi
}

extract() {
     if [[ -f $1 ]]; then
         case $1 in
             *.tar.bz2)   tar xvjf $1    ;;
             *.tar.gz)    tar xvzf $1    ;;
             *.bz2)       bunzip2 $1     ;;
             *.rar)       unrar x $1     ;;
             *.gz)        gunzip $1      ;;
             *.tar)       tar xvf $1     ;;
             *.tbz2)      tar xvjf $1    ;;
             *.tgz)       tar xvzf $1    ;;
             *.zip)       unzip $1       ;;
             *.Z)         uncompress $1  ;;
             *.7z)        7z x $1        ;;
             *)           echo "'$1' cannot be extracted via >extract<" ;;
         esac
     else
         echo "'$1' is not a valid file"
     fi
}

disable_inputs() {
    declare name="ILITEK ILITEK Multi-Touch"
    declare state
    state="$(IFS=$'\n'; arr=($(xinput list-props "$name")); echo "${arr[1]}")"
    if [[ "$state" = *1 ]];then
        xinput disable "$name"
    fi
}

load_bash_color() {
    # enable color support of ls and also add handy aliases
    if [[ -x /usr/bin/dircolors ]];then
        if [[ -r ~/.dircolors ]];then
            eval "$(dircolors --bourne-shell ~/.dircolors)"
        else
            eval "$(dircolors --bourne-shell)"
        fi
    fi
}

load_bash_completion() {
    # enable programmable completion features (you don't need to enable
    # this, if it's already enabled in /etc/bash.bashrc and /etc/profile
    # sources /etc/bash.bashrc).
    if ! shopt -oq posix; then
        if [[ -f /usr/share/bash-completion/bash_completion ]];then
            . /usr/share/bash-completion/bash_completion
        elif [[ -f /etc/bash_completion ]];then
            . /etc/bash_completion
        fi
    fi
    # personal
    if [[ $- == *i* ]];then
        for file in "$BASH_PATH/completion-"*;do
            . "$file"
        done
    fi
}

load_bash_key_bindings() {
    for file in "$BASH_PATH/key-bindings-"*;do
        . "$file"
    done
}

load_startx() {
    if [[ "$(tty)" = /dev/tty1 ]];then
        startx
    fi
}

load_config_hardware() {
    if [[ "$(tty)" == */pts/* ]];then
        mybrightness update
        disable_inputs
    fi
}

load_tmux() {
    if [[ "$(tty)" == */pts/* ]];then
        if [[ -z "$TMUX" ]];then
            . "$XDG_CONFIG_HOME/dot/bash/tmux-session"
            tmux_start
        fi
    fi
}

# -- startup --

# make less more friendly for non-text input files, see lesspipe(1)
#[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [[ -z "${debian_chroot:-}" && -r /etc/debian_chroot ]];then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
# force_color_prompt=yes

if [[ -n "$force_color_prompt" ]];then
    # We have color support; assume it's compliant with Ecma-48
    # (ISO/IEC-6429). (Lack of such support is extremely rare, and such
    # a case would tend to support setf rather than setaf.)
    if [[ -x /usr/bin/tput ]];then
        tput setaf 1 >& /dev/null
        color_prompt=yes
    else
        color_prompt=
    fi
fi

if [[ "$color_prompt" = yes ]];then
    PS1='${debian_chroot:+($debian_chroot)}'
    PS1="$PS1"'\[\033[01;32m\]\u@\h\[\033[00m\]:'
    PS1="$PS1"'\[\033[01;34m\]\w\[\033[00m\]'
    PS1="$PS1"'\n\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\n\$ '
fi

# unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
if [[ "$TERM" == xterm* || "$TERM" == rxvt* ]];then
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
fi

load_bash_color
load_bash_completion
load_bash_key_bindings
load_startx
load_config_hardware
load_tmux

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize
# append to the history file, don't overwrite it
shopt -s histappend

setxkbmap -layout us -variant altgr-intl

