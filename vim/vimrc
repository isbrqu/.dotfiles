" GENERAL
set nocompatible
set noswapfile
set ttyfast

" SECURITY
set nomodeline

set noerrorbells

set fileformats=unix
set fileencoding=utf-8
set encoding=utf-8

" VIEW
syntax on
set ruler
set showcmd
set showmatch
" line
set nowrap
set number
set relativenumber
set colorcolumn=80
" chars
set listchars=eol:↲,tab:↦\ ,extends:…,space:⋅
highlight ColorColumn ctermbg=16 guibg=lightgrey

" WINDOW
" When on, splitting a window will put the new window right of the current one.
set splitright
" Characters to fill the statuslines and vertical separators.
set fillchars=fold:-,vert:\│
highlight VertSplit ctermfg=237 ctermbg=237

" TERMINAL OUTPUT CODES
" visual bell
set t_vb=
" number of color
set t_Co=8

" Highlight the text line of the cursor with CursorLine
autocmd InsertEnter,InsertLeave * set cursorline!

" TAB
set tabstop=8
set softtabstop=4
set shiftwidth=4
set expandtab
set autoindent

" UNDO
set undofile
set undodir=~/.vim/undodir

" VIMINFO
" maximum number of previously edited files for which the marks are remembered
set viminfo='10
" maximum number of lines saved for each register.
set viminfo+=<50
" convert the text in the viminfo file from the 'encoding'
set viminfo+=c
" maximum size of an item in Kbyte.
set viminfo+=s10
" disable the effect of 'hlsearch' when loading the viminfo file
set viminfo+=h
" name of file
set viminfo+=n~/.vim/info-private
" maximum number of items in the search pattern history to be saved
" set viminfo+=/10
" maximum number of items in the command-line history to be saved
" set viminfo+=:10
" maximum number of items in the input-line history to be saved
" set viminfo+=@10
" the command-lines that you enter are remembered in a history table
set history=6

" SEARCH
set hlsearch
set incsearch

" CLIPBOARD
set clipboard=unnamedplus

" STATUS BAR
set laststatus=2
" Separate
set statusline=\  
" Where to truncate line if too long. Default is at the start.
" No width fields allowed.
set statusline+=%<
" Path to the file in the buffer, as typed or relative to current directory.
set statusline+=%f
" Modified flag, text is "[+]"; "[-]" if 'modifiable' is off.
set statusline+=%m
" Readonly flag, text is "[RO]".
set statusline+=%r
" Preview window flag, text is "[Preview]".
set statusline+=%w
" Separation point between left and right aligned items.
" No width fields allowed.
set statusline+=%=
" %l Number of lines in buffer. %c Column number (byte index).
set statusline+=[%l\,%c]
" Type of file in the buffer, e.g., "[vim]".  See 'filetype'.
set statusline+=%y
" Evaluate expression between '%{' and '}' and substitute result.
" Note that there is no '%' before the closing '}'.
" The expression cannot contain a '}' character, call a function to
" work around that.
set statusline+=[%{&fileformats}]
set statusline+=[%{&fileencoding}]
" colors
highlight StatusLine ctermfg=238 ctermbg=white
highlight StatusLineNC ctermfg=237 ctermbg=white

" RUNTIMEPATH
set runtimepath+=~/.config/fzf

" OTHERS
let mapleader=' '
set keywordprg=''

" NORMAL
" switch command-line
nnoremap <f4> :
" switch insert
nnoremap ga A
" quit
nnoremap <leader>q <esc>:quit<cr>
" move
noremap <leader>j <c-d>
noremap <leader>k <c-u>
" window
nnoremap <f2> <c-w>
nnoremap <c-h> <c-w><left>
nnoremap <c-l> <c-w><right>
nnoremap <c-k> <c-w><up>
nnoremap <c-j> <c-w><down>
" tab
noremap <silent> <up> gt
noremap <silent> <down> gT
" buffer
noremap <silent> <left> :bn<cr>
noremap <silent> <right> :bN<cr>
noremap <silent> <leader>l :bn<cr>
noremap <silent> <leader>h :bN<cr>
" disable
noremap <f1> <nop>
" search
noremap <silent> <leader>/ :noh<cr>
" replace
noremap <leader>; :%s//g<left><left>
" config reload
nnoremap <silent> <f5> <esc>:source ~/.vim/vimrc<cr>
" reload
nnoremap <silent> <leader>e <esc>:edit<cr>
" fzf
nnoremap <silent> <leader><leader> <esc>:Files<cr>
nnoremap <silent> <leader>b <esc>:Buffers<cr>
nnoremap <silent> <leader>g <esc>:Commits<cr>
nnoremap <silent> <leader>fh <esc>:Helptags<cr>

" INSERT
" disable
inoremap <f1> <nop>
" autocomplete
inoremap <expr> <tab> pumvisible() ? "\<c-n>" : "\<tab>"
inoremap <expr> <s-tab> pumvisible() ? "\<c-p>" : "\<s-tab>"
inoremap <expr> <cr> pumvisible() ? "\<c-y>" : "\<cr>"

" TERMINAL
" general
tnoremap <f2> <c-w>
" switch normal
tnoremap <f1> <c-w>N
" switch command-line
tnoremap <f4> <c-w>:

" AUTOSAVE
" enable AutoSave on Vim startup
let g:auto_save = 1
" do not display the auto-save notification
let g:auto_save_silent = 1

" FILETYPE
autocmd FileType gitcommit setlocal colorcolumn=51
autocmd FileType fugitive,help,netrw setlocal colorcolumn=
autocmd FileType help,netrw setlocal number relativenumber
autocmd FileType vim setlocal commentstring=\"\ %s
autocmd FileType python setlocal commentstring=#\ %s
autocmd FileType sh setlocal commentstring=#\ %s
autocmd FileType tmux setlocal commentstring=#\ %s
autocmd FileType conf setlocal commentstring=#\ %s
" fugitive
autocmd FileType fugitive
    \ nnoremap <buffer> <leader>p <esc>:Git push<cr>
autocmd FileType fugitive
    \ nnoremap <buffer> <leader>P <esc>:Git push -f<cr>

" FZF
" See `man fzf-tmux` for available options
if exists('$TMUX')
  let g:fzf_layout = { 'tmux': '-p90%,60%' }
else
  let g:fzf_layout = { 'window': { 'width': 0.9, 'height': 0.6 } }
endif

" Visual mode pressing * or # searches for the current selection
vnoremap <silent> * :<C-u>call EscapedSearch()<CR>/<C-R>=@/<CR><CR>N
vnoremap <silent> # :<C-u>call EscapedSearch()<CR>?<C-R>=@/<CR><CR>N

" <leader>r replace one by one
nnoremap <silent> <leader>r viw:call EscapedSearch()<CR>cgn
vnoremap <silent> <leader>r :call EscapedSearch()<CR>cgn

" <leader>R replace all
nnoremap <silent> <leader>R
    \ viw:call EscapedSearch()<CR>:call CmdLine("%s".'/'.@/.'/'.@/)<CR>
vnoremap <silent> <leader>R
    \ :call EscapedSearch()<CR>:call CmdLine("%s".'/'.@/.'/'.@/)<CR>

function! EscapedSearch() range
    " Backup what's in default register
    let l:saved_reg = @"
    " Copy selection
    execute 'normal! vgvy'
    " Escape special chars
    let l:pattern = escape(@", "\\/.*'$^~[]")
    let l:pattern = substitute(l:pattern, "\n$", "", "")
    " Set search
    let @/ = l:pattern
    " Restore default register
    let @" = l:saved_reg
endfunction

function! CmdLine(str)
    call feedkeys(":" . a:str)
endfunction

