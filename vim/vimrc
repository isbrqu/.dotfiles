" -- general --
set nocompatible
set noswapfile
set ttyfast

" -- security --
set nomodeline

set noerrorbells

set fileformats=unix
set fileencoding=utf-8
set encoding=utf-8
set ignorecase

" -- view --
syntax on
set ruler
set showcmd
set showmatch
" line
set nowrap
set number
set relativenumber
set colorcolumn=80
" chars
set listchars=eol:↲,tab:↦\ ,extends:…,space:⋅
highlight ColorColumn ctermbg=16 guibg=lightgrey
" -- abb --
noreabbrev ccc "$()"<left><left>
noreabbrev aaa "$"<left>
" -- delete --
set backspace=indent,eol,start
" -- window --
" When on, splitting a window will put the new window right of the current one.
set splitright
" Characters to fill the statuslines and vertical separators.
set fillchars=fold:\ ,vert:\│
highlight VertSplit ctermfg=237 ctermbg=237
highlight Folded ctermbg=black

" -- terminal output codes --
" visual bell
set t_vb=
" number of color
set t_Co=8

" Highlight the text line of the cursor with CursorLine
autocmd InsertEnter,InsertLeave * set cursorline!

" -- tab --
set tabstop=8
set softtabstop=4
set shiftwidth=4
set expandtab
set autoindent

" -- undo --
set undofile
set undodir=~/.vim/undodir

" -- viminfo --
" maximum number of previously edited files for which the marks are remembered
set viminfo='10
" maximum number of lines saved for each register.
set viminfo+=<50
" convert the text in the viminfo file from the 'encoding'
set viminfo+=c
" maximum size of an item in Kbyte.
set viminfo+=s10
" disable the effect of 'hlsearch' when loading the viminfo file
set viminfo+=h
" name of file
set viminfo+=n~/.vim/info-private
" maximum number of items in the search pattern history to be saved
" set viminfo+=/10
" maximum number of items in the command-line history to be saved
" set viminfo+=:10
" maximum number of items in the input-line history to be saved
" set viminfo+=@10
" the command-lines that you enter are remembered in a history table
set history=6

" -- search --
set hlsearch
set incsearch

" -- clipboard --
set clipboard=unnamedplus

" -- status bar --
set laststatus=2
" Separate
set statusline=\  
" Where to truncate line if too long. Default is at the start.
" No width fields allowed.
set statusline+=%<
" Path to the file in the buffer, as typed or relative to current directory.
set statusline+=%f
" Modified flag, text is "[+]"; "[-]" if 'modifiable' is off.
set statusline+=%m
" Readonly flag, text is "[RO]".
set statusline+=%r
" Preview window flag, text is "[Preview]".
set statusline+=%w
" Separation point between left and right aligned items.
" No width fields allowed.
set statusline+=%=
" %l Number of lines in buffer. %c Column number (byte index).
set statusline+=[%l\,%c]
" Type of file in the buffer, e.g., "[vim]".  See 'filetype'.
set statusline+=%y
" Evaluate expression between '%{' and '}' and substitute result.
" Note that there is no '%' before the closing '}'.
" The expression cannot contain a '}' character, call a function to
" work around that.
set statusline+=[%{&fileformats}]
set statusline+=[%{&fileencoding}]
" colors
highlight StatusLine ctermfg=238 ctermbg=white
highlight StatusLineNC ctermfg=237 ctermbg=white

" -- runtimepath --
set runtimepath+=~/.config/fzf

" -- others --
let mapleader=' '
let maplocalleader='-'
set keywordprg=''
set commentstring=#\ %s

" -- normal --
" switch command-line
nnoremap <f4> :
" quit
nnoremap <leader>q :quit<cr>
" move
nnoremap <leader>j <c-d>
nnoremap <leader>k <c-u>
" window
nnoremap <f2> <c-w>
nnoremap <c-h> <c-w><left>
nnoremap <c-l> <c-w><right>
nnoremap <c-k> <c-w><up>
nnoremap <c-j> <c-w><down>
nnoremap <silent> <leader>z :only<cr>
" tab
nnoremap <up> gt
nnoremap <down> gT
" buffer
nnoremap <silent> <left> :bn<cr>
nnoremap <silent> <right> :bN<cr>
nnoremap <silent> <leader>l :bn<cr>
nnoremap <silent> <leader>h :bN<cr>
" disable
nnoremap <f1> <nop>
" search
nnoremap <silent> <leader><leader> :FZF<cr>
nnoremap <silent> <leader>ff :Files<cr>
nnoremap <silent> <leader>fc :Commits<cr>
nnoremap <silent> <leader>fb :Buffers<cr>
nnoremap <silent> <leader>fw :Windows<cr>
nnoremap <silent> <leader>fh :Helptags<cr>
nnoremap <silent> <leader>ft :BTags<cr>
nnoremap <silent> <leader>fs :Rl ^#+ -+ .+ -+$<cr>
nnoremap <silent> <leader>fS :Rg ^(#+\|"\|//) -+ .+ -+$<cr>
nnoremap <silent> <leader>fl :BLines<esc>
" settings
nnoremap <silent> <f1> :edit ~/.vim/vimrc<cr>
nnoremap <silent> <f5> :source ~/.vim/vimrc<cr>
nnoremap <silent> <leader>/ :nohlsearch<cr>
" reload
nnoremap <silent> <leader>e :edit<cr>
" yank
nnoremap <leader>y ggyG

" -- netrw --
nnoremap <silent> <leader>- :Vexplore<cr>

" -- browser --
nnoremap <silent> <leader>x "uyiW:call system('xdg-open <c-r>u &')<cr>

" -- insert --
" disable
inoremap <f1> <nop>
" autocomplete
inoremap <expr> <tab> pumvisible() ? "\<c-n>" : "\<tab>"
inoremap <expr> <s-tab> pumvisible() ? "\<c-p>" : "\<s-tab>"
inoremap <expr> <cr> pumvisible() ? "\<c-y>" : "\<cr>"

" -- terminal --
" general
tnoremap <f2> <c-w>
" switch normal
tnoremap <f1> <c-w>N
" switch command-line
tnoremap <f4> <c-w>:

" -- autosave --
" enable AutoSave on Vim startup
let g:auto_save = 1
" do not display the auto-save notification
let g:auto_save_silent = 1

" -- fzf --
" See `man fzf-tmux` for available options
if exists('$TMUX')
  let g:fzf_layout = { 'tmux': '-p90%,60%' }
else
  let g:fzf_layout = { 'window': { 'width': 0.9, 'height': 0.6 } }
endif

" -- man --
nnoremap <leader>m :Manualbro<space>
function! Manualbro(pagebro)
    let file = "~/.local/tmp/man/".a:pagebro.".man"
    execute "new ".l:file
    lchdir ~/.local/tmp/man
    if !filereadable(expand(l:file))
        execute "write ".l:file
        execute "normal!:read!man ".a:pagebro."\<cr>ggdd"
    endif
    setlocal nomodifiable
endfunction

" -- replace --
" simple replace
nnoremap <leader>\ :%s//g<left><left>
" visual mode pressing * or # searches for the current selection
vnoremap <silent> * :<c-u>call EscapedSearch()<cr>/<c-r>=@/<cr><cr>N
vnoremap <silent> # :<c-u>call EscapedSearch()<cr>?<c-r>=@/<cr><cr>N
" <leader>r replace one by one
nnoremap <silent> <leader>r viw:call EscapedSearch()<cr>cgn
vnoremap <silent> <leader>r :call EscapedSearch()<cr>cgn
" <leader>R replace all
nnoremap <silent> <leader>R
    \ viw:call EscapedSearch()<cr>:call CmdLine("%s".'/'.@/.'/'.@/)<cr>
vnoremap <silent> <leader>R
    \ :call EscapedSearch()<cr>:call CmdLine("%s".'/'.@/.'/'.@/)<cr>
" function EscapedSearch
function! EscapedSearch() range
    " Backup what's in default register
    let l:saved_reg = @"
    " Copy selection
    execute 'normal! vgvy'
    " Escape special chars
    let l:pattern = escape(@", "\\/.*'$^~[]")
    let l:pattern = substitute(l:pattern, "\n$", "", "")
    " Set search
    let @/ = l:pattern
    " Restore default register
    let @" = l:saved_reg
endfunction
" function CmdLine
function! CmdLine(str)
    call feedkeys(":" . a:str)
endfunction

let fzf_opt_general='--smart-case  --column --line-number --no-heading'
let fzf_opt_color='--colors "match:none" --color=always'
let fzf_rg='rg '.fzf_opt_general.' '.fzf_opt_color
command! -bang -nargs=* Manualbro call Manualbro(<q-args>)
command! -bang -nargs=* Rl
  \ call fzf#vim#grep(
  \   fzf_rg.' -g "'.expand('%').'" -- '.shellescape(<q-args>), 1,
  \   fzf#vim#with_preview(), <bang>0)

command! -bang -nargs=* Rg
  \ call fzf#vim#grep(
  \   fzf_rg.' -- '.shellescape(<q-args>), 1,
  \   fzf#vim#with_preview(), <bang>0)

augroup filetype_common
    autocmd!
    autocmd FileType help,man,fugitive,markdown,tags
        \ setlocal number relativenumber
    autocmd FileType help,man,fugitive,markdown,tags
        \ setlocal colorcolumn=
augroup END

augroup filetype_vim
    autocmd!
    autocmd FileType vim setlocal commentstring=\"\ %s
    autocmd FileType vim nnoremap <buffer> <leader>fs :Rl ^" -+ .+ -+$<cr>
    autocmd FileType vim nnoremap <buffer> <leader>f1 :Rl ^augroup [^A-Z]<cr>
    autocmd FileType vim nnoremap <buffer> <leader>f2 :Rl ^fun(ction)?! <cr>
augroup END

augroup filetype_python
    autocmd!
    autocmd FileType python nnoremap <buffer> <leader>f1 :Rl ^\s*def <cr>
augroup END

augroup filetype_javascript_cpp
    autocmd!
    autocmd FileType javascript,cpp setlocal commentstring=\//\ %s
    autocmd FileType javascript,cpp nnoremap <buffer> <leader>fs :Rl ^// -+ .+ -+$<cr>
augroup END

augroup filetype_markdown
    autocmd!
    autocmd FileType markdown nnoremap <buffer> <leader>fs :Rl ^#+ <cr>
augroup END

augroup filetype_sql
    autocmd!
    autocmd FileType sql setlocal commentstring=\--\ %s
    autocmd FileType sql nnoremap <buffer> <leader>fs :Rl ^-+ .+ -+$<cr>
    autocmd FileType sql nnoremap <buffer> <leader>f1 :Rl ^\s*create <cr>
augroup END

augroup filetype_sh
    autocmd!
    autocmd FileType sh nnoremap <buffer> <leader>f1 :Rl ^.+\(\) ?\{$<cr>
augroup END

augroup filetype_man
    autocmd!
    autocmd FileType man nnoremap <buffer> <leader>fs :Rl ^[A-Z ]+$<cr>
    autocmd FileType man
        \ nnoremap <buffer> <leader>f1 :Rl ^\s+(-\|--)(\[.+\])?.+ <cr>
    autocmd FileType man
        \ nnoremap <silent> <buffer> <leader>q
        \ :call system("rm ~/.local/tmp/man/".expand("%"))<cr>:bdelete<cr>
    autocmd FileType man
        \ nnoremap <buffer> <leader>f3 :Rl ^\s{5}[a-z]+-[a-z]+<cr>
augroup END

augroup filetype_fugitive
    autocmd!
    autocmd FileType fugitive nnoremap <buffer> <leader>p :Git push<cr>
    autocmd FileType fugitive nnoremap <buffer> <leader>P :Git push -f<cr>
    autocmd FileType fugitive nnoremap <buffer> q <nop>
augroup END

augroup filetype_gitcommit
    autocmd!
    autocmd FileType gitcommit setlocal colorcolumn=51
augroup END

augroup filetype_help
    autocmd!
    autocmd FileType help nnoremap <buffer> <leader>fs :Rl ^[A-Z _]+<cr>
augroup END

augroup i3config_ft_detection
  autocmd!
  autocmd BufNewFile,BufRead ~/.config/dot/i3wm/config setlocal filetype=i3config
augroup END
